/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.exportSymbol('proto.notekeeper.LoadUIStateResponse', null, global);
goog.exportSymbol('proto.notekeeper.SaveUIStateRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notekeeper.LoadUIStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notekeeper.LoadUIStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.notekeeper.LoadUIStateResponse.displayName = 'proto.notekeeper.LoadUIStateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notekeeper.LoadUIStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.notekeeper.LoadUIStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notekeeper.LoadUIStateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notekeeper.LoadUIStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && common_pb.ResponseHeader.toObject(includeInstance, f),
    windowwidth: jspb.Message.getFieldWithDefault(msg, 2, 0),
    windowheight: jspb.Message.getFieldWithDefault(msg, 3, 0),
    windowxposition: jspb.Message.getFieldWithDefault(msg, 4, 0),
    windowyposition: jspb.Message.getFieldWithDefault(msg, 5, 0),
    windowmaximized: jspb.Message.getFieldWithDefault(msg, 6, false),
    windowminimized: jspb.Message.getFieldWithDefault(msg, 7, false),
    windowfullscreen: jspb.Message.getFieldWithDefault(msg, 8, false),
    displaywidth: jspb.Message.getFieldWithDefault(msg, 9, 0),
    displayheight: jspb.Message.getFieldWithDefault(msg, 10, 0),
    displayxposition: jspb.Message.getFieldWithDefault(msg, 11, 0),
    displayyposition: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notekeeper.LoadUIStateResponse}
 */
proto.notekeeper.LoadUIStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notekeeper.LoadUIStateResponse;
  return proto.notekeeper.LoadUIStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notekeeper.LoadUIStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notekeeper.LoadUIStateResponse}
 */
proto.notekeeper.LoadUIStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.ResponseHeader;
      reader.readMessage(value,common_pb.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWindowwidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWindowheight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWindowxposition(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWindowyposition(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWindowmaximized(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWindowminimized(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWindowfullscreen(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDisplaywidth(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDisplayheight(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDisplayxposition(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDisplayyposition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notekeeper.LoadUIStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notekeeper.LoadUIStateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notekeeper.LoadUIStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notekeeper.LoadUIStateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getWindowwidth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getWindowheight();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getWindowxposition();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getWindowyposition();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getWindowmaximized();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getWindowminimized();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getWindowfullscreen();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getDisplaywidth();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getDisplayheight();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getDisplayxposition();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getDisplayyposition();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
};


/**
 * optional ResponseHeader header = 1;
 * @return {?proto.notekeeper.ResponseHeader}
 */
proto.notekeeper.LoadUIStateResponse.prototype.getHeader = function() {
  return /** @type{?proto.notekeeper.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, common_pb.ResponseHeader, 1));
};


/** @param {?proto.notekeeper.ResponseHeader|undefined} value */
proto.notekeeper.LoadUIStateResponse.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.notekeeper.LoadUIStateResponse.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.notekeeper.LoadUIStateResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 windowWidth = 2;
 * @return {number}
 */
proto.notekeeper.LoadUIStateResponse.prototype.getWindowwidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.notekeeper.LoadUIStateResponse.prototype.setWindowwidth = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 windowHeight = 3;
 * @return {number}
 */
proto.notekeeper.LoadUIStateResponse.prototype.getWindowheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.notekeeper.LoadUIStateResponse.prototype.setWindowheight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 windowXPosition = 4;
 * @return {number}
 */
proto.notekeeper.LoadUIStateResponse.prototype.getWindowxposition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.notekeeper.LoadUIStateResponse.prototype.setWindowxposition = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 windowYPosition = 5;
 * @return {number}
 */
proto.notekeeper.LoadUIStateResponse.prototype.getWindowyposition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.notekeeper.LoadUIStateResponse.prototype.setWindowyposition = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool windowMaximized = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.notekeeper.LoadUIStateResponse.prototype.getWindowmaximized = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.notekeeper.LoadUIStateResponse.prototype.setWindowmaximized = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool windowMinimized = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.notekeeper.LoadUIStateResponse.prototype.getWindowminimized = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.notekeeper.LoadUIStateResponse.prototype.setWindowminimized = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool windowFullscreen = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.notekeeper.LoadUIStateResponse.prototype.getWindowfullscreen = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.notekeeper.LoadUIStateResponse.prototype.setWindowfullscreen = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional int32 displayWidth = 9;
 * @return {number}
 */
proto.notekeeper.LoadUIStateResponse.prototype.getDisplaywidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.notekeeper.LoadUIStateResponse.prototype.setDisplaywidth = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 displayHeight = 10;
 * @return {number}
 */
proto.notekeeper.LoadUIStateResponse.prototype.getDisplayheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.notekeeper.LoadUIStateResponse.prototype.setDisplayheight = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 displayXPosition = 11;
 * @return {number}
 */
proto.notekeeper.LoadUIStateResponse.prototype.getDisplayxposition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.notekeeper.LoadUIStateResponse.prototype.setDisplayxposition = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 displayYPosition = 12;
 * @return {number}
 */
proto.notekeeper.LoadUIStateResponse.prototype.getDisplayyposition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.notekeeper.LoadUIStateResponse.prototype.setDisplayyposition = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notekeeper.SaveUIStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notekeeper.SaveUIStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.notekeeper.SaveUIStateRequest.displayName = 'proto.notekeeper.SaveUIStateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notekeeper.SaveUIStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.notekeeper.SaveUIStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notekeeper.SaveUIStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notekeeper.SaveUIStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && common_pb.RequestHeader.toObject(includeInstance, f),
    windowwidth: jspb.Message.getFieldWithDefault(msg, 2, 0),
    windowheight: jspb.Message.getFieldWithDefault(msg, 3, 0),
    windowxposition: jspb.Message.getFieldWithDefault(msg, 4, 0),
    windowyposition: jspb.Message.getFieldWithDefault(msg, 5, 0),
    windowmaximized: jspb.Message.getFieldWithDefault(msg, 6, false),
    windowminimized: jspb.Message.getFieldWithDefault(msg, 7, false),
    windowfullscreen: jspb.Message.getFieldWithDefault(msg, 8, false),
    displaywidth: jspb.Message.getFieldWithDefault(msg, 9, 0),
    displayheight: jspb.Message.getFieldWithDefault(msg, 10, 0),
    displayxposition: jspb.Message.getFieldWithDefault(msg, 11, 0),
    displayyposition: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notekeeper.SaveUIStateRequest}
 */
proto.notekeeper.SaveUIStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notekeeper.SaveUIStateRequest;
  return proto.notekeeper.SaveUIStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notekeeper.SaveUIStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notekeeper.SaveUIStateRequest}
 */
proto.notekeeper.SaveUIStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.RequestHeader;
      reader.readMessage(value,common_pb.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWindowwidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWindowheight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWindowxposition(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWindowyposition(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWindowmaximized(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWindowminimized(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWindowfullscreen(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDisplaywidth(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDisplayheight(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDisplayxposition(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDisplayyposition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notekeeper.SaveUIStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notekeeper.SaveUIStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notekeeper.SaveUIStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.notekeeper.SaveUIStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getWindowwidth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getWindowheight();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getWindowxposition();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getWindowyposition();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getWindowmaximized();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getWindowminimized();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getWindowfullscreen();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getDisplaywidth();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getDisplayheight();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getDisplayxposition();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getDisplayyposition();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
};


/**
 * optional RequestHeader header = 1;
 * @return {?proto.notekeeper.RequestHeader}
 */
proto.notekeeper.SaveUIStateRequest.prototype.getHeader = function() {
  return /** @type{?proto.notekeeper.RequestHeader} */ (
    jspb.Message.getWrapperField(this, common_pb.RequestHeader, 1));
};


/** @param {?proto.notekeeper.RequestHeader|undefined} value */
proto.notekeeper.SaveUIStateRequest.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.notekeeper.SaveUIStateRequest.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.notekeeper.SaveUIStateRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 windowWidth = 2;
 * @return {number}
 */
proto.notekeeper.SaveUIStateRequest.prototype.getWindowwidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.notekeeper.SaveUIStateRequest.prototype.setWindowwidth = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 windowHeight = 3;
 * @return {number}
 */
proto.notekeeper.SaveUIStateRequest.prototype.getWindowheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.notekeeper.SaveUIStateRequest.prototype.setWindowheight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 windowXPosition = 4;
 * @return {number}
 */
proto.notekeeper.SaveUIStateRequest.prototype.getWindowxposition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.notekeeper.SaveUIStateRequest.prototype.setWindowxposition = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 windowYPosition = 5;
 * @return {number}
 */
proto.notekeeper.SaveUIStateRequest.prototype.getWindowyposition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.notekeeper.SaveUIStateRequest.prototype.setWindowyposition = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool windowMaximized = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.notekeeper.SaveUIStateRequest.prototype.getWindowmaximized = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.notekeeper.SaveUIStateRequest.prototype.setWindowmaximized = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool windowMinimized = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.notekeeper.SaveUIStateRequest.prototype.getWindowminimized = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.notekeeper.SaveUIStateRequest.prototype.setWindowminimized = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool windowFullscreen = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.notekeeper.SaveUIStateRequest.prototype.getWindowfullscreen = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.notekeeper.SaveUIStateRequest.prototype.setWindowfullscreen = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional int32 displayWidth = 9;
 * @return {number}
 */
proto.notekeeper.SaveUIStateRequest.prototype.getDisplaywidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.notekeeper.SaveUIStateRequest.prototype.setDisplaywidth = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 displayHeight = 10;
 * @return {number}
 */
proto.notekeeper.SaveUIStateRequest.prototype.getDisplayheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.notekeeper.SaveUIStateRequest.prototype.setDisplayheight = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 displayXPosition = 11;
 * @return {number}
 */
proto.notekeeper.SaveUIStateRequest.prototype.getDisplayxposition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.notekeeper.SaveUIStateRequest.prototype.setDisplayxposition = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 displayYPosition = 12;
 * @return {number}
 */
proto.notekeeper.SaveUIStateRequest.prototype.getDisplayyposition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.notekeeper.SaveUIStateRequest.prototype.setDisplayyposition = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


goog.object.extend(exports, proto.notekeeper);

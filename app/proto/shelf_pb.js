/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
var title_pb = require('./title_pb.js');
goog.exportSymbol('proto.notekeeper.CreateShelfRequest', null, global);
goog.exportSymbol('proto.notekeeper.DeleteShelfRequest', null, global);
goog.exportSymbol('proto.notekeeper.GetShelvesRequest', null, global);
goog.exportSymbol('proto.notekeeper.GetShelvesResponse', null, global);
goog.exportSymbol('proto.notekeeper.SaveShelfRequest', null, global);
goog.exportSymbol('proto.notekeeper.Shelf', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notekeeper.Shelf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notekeeper.Shelf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.notekeeper.Shelf.displayName = 'proto.notekeeper.Shelf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notekeeper.Shelf.prototype.toObject = function(opt_includeInstance) {
  return proto.notekeeper.Shelf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notekeeper.Shelf} msg The msg instance to transform.
 * @return {!Object}
 */
proto.notekeeper.Shelf.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: (f = msg.getName()) && title_pb.Title.toObject(includeInstance, f),
    scope: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pb_default: jspb.Message.getFieldWithDefault(msg, 4, false),
    trash: jspb.Message.getFieldWithDefault(msg, 5, false),
    locked: jspb.Message.getFieldWithDefault(msg, 6, false),
    created: jspb.Message.getFieldWithDefault(msg, 7, ""),
    updated: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notekeeper.Shelf}
 */
proto.notekeeper.Shelf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notekeeper.Shelf;
  return proto.notekeeper.Shelf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notekeeper.Shelf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notekeeper.Shelf}
 */
proto.notekeeper.Shelf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new title_pb.Title;
      reader.readMessage(value,title_pb.Title.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDefault(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTrash(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocked(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreated(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notekeeper.Shelf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notekeeper.Shelf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notekeeper.Shelf} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.notekeeper.Shelf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      title_pb.Title.serializeBinaryToWriter
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDefault();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getTrash();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getLocked();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getCreated();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUpdated();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.notekeeper.Shelf.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.notekeeper.Shelf.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Title name = 2;
 * @return {?proto.notekeeper.Title}
 */
proto.notekeeper.Shelf.prototype.getName = function() {
  return /** @type{?proto.notekeeper.Title} */ (
    jspb.Message.getWrapperField(this, title_pb.Title, 2));
};


/** @param {?proto.notekeeper.Title|undefined} value */
proto.notekeeper.Shelf.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.notekeeper.Shelf.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.notekeeper.Shelf.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string scope = 3;
 * @return {string}
 */
proto.notekeeper.Shelf.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.notekeeper.Shelf.prototype.setScope = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool default = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.notekeeper.Shelf.prototype.getDefault = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.notekeeper.Shelf.prototype.setDefault = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool trash = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.notekeeper.Shelf.prototype.getTrash = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.notekeeper.Shelf.prototype.setTrash = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool locked = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.notekeeper.Shelf.prototype.getLocked = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.notekeeper.Shelf.prototype.setLocked = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string created = 7;
 * @return {string}
 */
proto.notekeeper.Shelf.prototype.getCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.notekeeper.Shelf.prototype.setCreated = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string updated = 8;
 * @return {string}
 */
proto.notekeeper.Shelf.prototype.getUpdated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.notekeeper.Shelf.prototype.setUpdated = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notekeeper.GetShelvesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notekeeper.GetShelvesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.notekeeper.GetShelvesRequest.displayName = 'proto.notekeeper.GetShelvesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notekeeper.GetShelvesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.notekeeper.GetShelvesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notekeeper.GetShelvesRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.notekeeper.GetShelvesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && common_pb.RequestHeader.toObject(includeInstance, f),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    scope: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notekeeper.GetShelvesRequest}
 */
proto.notekeeper.GetShelvesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notekeeper.GetShelvesRequest;
  return proto.notekeeper.GetShelvesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notekeeper.GetShelvesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notekeeper.GetShelvesRequest}
 */
proto.notekeeper.GetShelvesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.RequestHeader;
      reader.readMessage(value,common_pb.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notekeeper.GetShelvesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notekeeper.GetShelvesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notekeeper.GetShelvesRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.notekeeper.GetShelvesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional RequestHeader header = 1;
 * @return {?proto.notekeeper.RequestHeader}
 */
proto.notekeeper.GetShelvesRequest.prototype.getHeader = function() {
  return /** @type{?proto.notekeeper.RequestHeader} */ (
    jspb.Message.getWrapperField(this, common_pb.RequestHeader, 1));
};


/** @param {?proto.notekeeper.RequestHeader|undefined} value */
proto.notekeeper.GetShelvesRequest.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.notekeeper.GetShelvesRequest.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.notekeeper.GetShelvesRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.notekeeper.GetShelvesRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.notekeeper.GetShelvesRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string scope = 3;
 * @return {string}
 */
proto.notekeeper.GetShelvesRequest.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.notekeeper.GetShelvesRequest.prototype.setScope = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notekeeper.GetShelvesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.notekeeper.GetShelvesResponse.repeatedFields_, null);
};
goog.inherits(proto.notekeeper.GetShelvesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.notekeeper.GetShelvesResponse.displayName = 'proto.notekeeper.GetShelvesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.notekeeper.GetShelvesResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notekeeper.GetShelvesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.notekeeper.GetShelvesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notekeeper.GetShelvesResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.notekeeper.GetShelvesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && common_pb.ResponseHeader.toObject(includeInstance, f),
    shelvesList: jspb.Message.toObjectList(msg.getShelvesList(),
    proto.notekeeper.Shelf.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notekeeper.GetShelvesResponse}
 */
proto.notekeeper.GetShelvesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notekeeper.GetShelvesResponse;
  return proto.notekeeper.GetShelvesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notekeeper.GetShelvesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notekeeper.GetShelvesResponse}
 */
proto.notekeeper.GetShelvesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.ResponseHeader;
      reader.readMessage(value,common_pb.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.notekeeper.Shelf;
      reader.readMessage(value,proto.notekeeper.Shelf.deserializeBinaryFromReader);
      msg.addShelves(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notekeeper.GetShelvesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notekeeper.GetShelvesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notekeeper.GetShelvesResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.notekeeper.GetShelvesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getShelvesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.notekeeper.Shelf.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader header = 1;
 * @return {?proto.notekeeper.ResponseHeader}
 */
proto.notekeeper.GetShelvesResponse.prototype.getHeader = function() {
  return /** @type{?proto.notekeeper.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, common_pb.ResponseHeader, 1));
};


/** @param {?proto.notekeeper.ResponseHeader|undefined} value */
proto.notekeeper.GetShelvesResponse.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.notekeeper.GetShelvesResponse.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.notekeeper.GetShelvesResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Shelf shelves = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.notekeeper.Shelf>}
 */
proto.notekeeper.GetShelvesResponse.prototype.getShelvesList = function() {
  return /** @type{!Array.<!proto.notekeeper.Shelf>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.notekeeper.Shelf, 2));
};


/** @param {!Array.<!proto.notekeeper.Shelf>} value */
proto.notekeeper.GetShelvesResponse.prototype.setShelvesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.notekeeper.Shelf=} opt_value
 * @param {number=} opt_index
 * @return {!proto.notekeeper.Shelf}
 */
proto.notekeeper.GetShelvesResponse.prototype.addShelves = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.notekeeper.Shelf, opt_index);
};


proto.notekeeper.GetShelvesResponse.prototype.clearShelvesList = function() {
  this.setShelvesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notekeeper.CreateShelfRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notekeeper.CreateShelfRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.notekeeper.CreateShelfRequest.displayName = 'proto.notekeeper.CreateShelfRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notekeeper.CreateShelfRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.notekeeper.CreateShelfRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notekeeper.CreateShelfRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.notekeeper.CreateShelfRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && common_pb.RequestHeader.toObject(includeInstance, f),
    name: (f = msg.getName()) && title_pb.Title.toObject(includeInstance, f),
    id: jspb.Message.getFieldWithDefault(msg, 3, ""),
    scope: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notekeeper.CreateShelfRequest}
 */
proto.notekeeper.CreateShelfRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notekeeper.CreateShelfRequest;
  return proto.notekeeper.CreateShelfRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notekeeper.CreateShelfRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notekeeper.CreateShelfRequest}
 */
proto.notekeeper.CreateShelfRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.RequestHeader;
      reader.readMessage(value,common_pb.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new title_pb.Title;
      reader.readMessage(value,title_pb.Title.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notekeeper.CreateShelfRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notekeeper.CreateShelfRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notekeeper.CreateShelfRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.notekeeper.CreateShelfRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      title_pb.Title.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional RequestHeader header = 1;
 * @return {?proto.notekeeper.RequestHeader}
 */
proto.notekeeper.CreateShelfRequest.prototype.getHeader = function() {
  return /** @type{?proto.notekeeper.RequestHeader} */ (
    jspb.Message.getWrapperField(this, common_pb.RequestHeader, 1));
};


/** @param {?proto.notekeeper.RequestHeader|undefined} value */
proto.notekeeper.CreateShelfRequest.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.notekeeper.CreateShelfRequest.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.notekeeper.CreateShelfRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Title name = 2;
 * @return {?proto.notekeeper.Title}
 */
proto.notekeeper.CreateShelfRequest.prototype.getName = function() {
  return /** @type{?proto.notekeeper.Title} */ (
    jspb.Message.getWrapperField(this, title_pb.Title, 2));
};


/** @param {?proto.notekeeper.Title|undefined} value */
proto.notekeeper.CreateShelfRequest.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.notekeeper.CreateShelfRequest.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.notekeeper.CreateShelfRequest.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.notekeeper.CreateShelfRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.notekeeper.CreateShelfRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string scope = 4;
 * @return {string}
 */
proto.notekeeper.CreateShelfRequest.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.notekeeper.CreateShelfRequest.prototype.setScope = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notekeeper.SaveShelfRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notekeeper.SaveShelfRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.notekeeper.SaveShelfRequest.displayName = 'proto.notekeeper.SaveShelfRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notekeeper.SaveShelfRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.notekeeper.SaveShelfRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notekeeper.SaveShelfRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.notekeeper.SaveShelfRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && common_pb.RequestHeader.toObject(includeInstance, f),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ownerid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    scope: jspb.Message.getFieldWithDefault(msg, 4, ""),
    name: (f = msg.getName()) && title_pb.Title.toObject(includeInstance, f),
    locked: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notekeeper.SaveShelfRequest}
 */
proto.notekeeper.SaveShelfRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notekeeper.SaveShelfRequest;
  return proto.notekeeper.SaveShelfRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notekeeper.SaveShelfRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notekeeper.SaveShelfRequest}
 */
proto.notekeeper.SaveShelfRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.RequestHeader;
      reader.readMessage(value,common_pb.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 5:
      var value = new title_pb.Title;
      reader.readMessage(value,title_pb.Title.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocked(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notekeeper.SaveShelfRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notekeeper.SaveShelfRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notekeeper.SaveShelfRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.notekeeper.SaveShelfRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOwnerid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      title_pb.Title.serializeBinaryToWriter
    );
  }
  f = message.getLocked();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional RequestHeader header = 1;
 * @return {?proto.notekeeper.RequestHeader}
 */
proto.notekeeper.SaveShelfRequest.prototype.getHeader = function() {
  return /** @type{?proto.notekeeper.RequestHeader} */ (
    jspb.Message.getWrapperField(this, common_pb.RequestHeader, 1));
};


/** @param {?proto.notekeeper.RequestHeader|undefined} value */
proto.notekeeper.SaveShelfRequest.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.notekeeper.SaveShelfRequest.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.notekeeper.SaveShelfRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.notekeeper.SaveShelfRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.notekeeper.SaveShelfRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string ownerId = 3;
 * @return {string}
 */
proto.notekeeper.SaveShelfRequest.prototype.getOwnerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.notekeeper.SaveShelfRequest.prototype.setOwnerid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string scope = 4;
 * @return {string}
 */
proto.notekeeper.SaveShelfRequest.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.notekeeper.SaveShelfRequest.prototype.setScope = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional Title name = 5;
 * @return {?proto.notekeeper.Title}
 */
proto.notekeeper.SaveShelfRequest.prototype.getName = function() {
  return /** @type{?proto.notekeeper.Title} */ (
    jspb.Message.getWrapperField(this, title_pb.Title, 5));
};


/** @param {?proto.notekeeper.Title|undefined} value */
proto.notekeeper.SaveShelfRequest.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.notekeeper.SaveShelfRequest.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.notekeeper.SaveShelfRequest.prototype.hasName = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool locked = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.notekeeper.SaveShelfRequest.prototype.getLocked = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.notekeeper.SaveShelfRequest.prototype.setLocked = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notekeeper.DeleteShelfRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notekeeper.DeleteShelfRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.notekeeper.DeleteShelfRequest.displayName = 'proto.notekeeper.DeleteShelfRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notekeeper.DeleteShelfRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.notekeeper.DeleteShelfRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notekeeper.DeleteShelfRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.notekeeper.DeleteShelfRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && common_pb.RequestHeader.toObject(includeInstance, f),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ownerid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    scope: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notekeeper.DeleteShelfRequest}
 */
proto.notekeeper.DeleteShelfRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notekeeper.DeleteShelfRequest;
  return proto.notekeeper.DeleteShelfRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notekeeper.DeleteShelfRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notekeeper.DeleteShelfRequest}
 */
proto.notekeeper.DeleteShelfRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.RequestHeader;
      reader.readMessage(value,common_pb.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notekeeper.DeleteShelfRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notekeeper.DeleteShelfRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notekeeper.DeleteShelfRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.notekeeper.DeleteShelfRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOwnerid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional RequestHeader header = 1;
 * @return {?proto.notekeeper.RequestHeader}
 */
proto.notekeeper.DeleteShelfRequest.prototype.getHeader = function() {
  return /** @type{?proto.notekeeper.RequestHeader} */ (
    jspb.Message.getWrapperField(this, common_pb.RequestHeader, 1));
};


/** @param {?proto.notekeeper.RequestHeader|undefined} value */
proto.notekeeper.DeleteShelfRequest.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.notekeeper.DeleteShelfRequest.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.notekeeper.DeleteShelfRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.notekeeper.DeleteShelfRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.notekeeper.DeleteShelfRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string ownerId = 3;
 * @return {string}
 */
proto.notekeeper.DeleteShelfRequest.prototype.getOwnerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.notekeeper.DeleteShelfRequest.prototype.setOwnerid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string scope = 4;
 * @return {string}
 */
proto.notekeeper.DeleteShelfRequest.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.notekeeper.DeleteShelfRequest.prototype.setScope = function(value) {
  jspb.Message.setField(this, 4, value);
};


goog.object.extend(exports, proto.notekeeper);

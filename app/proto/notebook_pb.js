/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
var title_pb = require('./title_pb.js');
goog.exportSymbol('proto.notekeeper.CreateNotebookRequest', null, global);
goog.exportSymbol('proto.notekeeper.DeleteNotebookRequest', null, global);
goog.exportSymbol('proto.notekeeper.GetNotebooksRequest', null, global);
goog.exportSymbol('proto.notekeeper.GetNotebooksResponse', null, global);
goog.exportSymbol('proto.notekeeper.Notebook', null, global);
goog.exportSymbol('proto.notekeeper.SaveNotebookRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notekeeper.Notebook = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notekeeper.Notebook, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.notekeeper.Notebook.displayName = 'proto.notekeeper.Notebook';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notekeeper.Notebook.prototype.toObject = function(opt_includeInstance) {
  return proto.notekeeper.Notebook.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notekeeper.Notebook} msg The msg instance to transform.
 * @return {!Object}
 */
proto.notekeeper.Notebook.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: (f = msg.getName()) && title_pb.Title.toObject(includeInstance, f),
    scope: jspb.Message.getFieldWithDefault(msg, 3, ""),
    container: jspb.Message.getFieldWithDefault(msg, 4, ""),
    ownerid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    containerid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    pb_default: jspb.Message.getFieldWithDefault(msg, 7, false),
    locked: jspb.Message.getFieldWithDefault(msg, 8, false),
    notecount: jspb.Message.getFieldWithDefault(msg, 9, 0),
    created: jspb.Message.getFieldWithDefault(msg, 10, ""),
    updated: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notekeeper.Notebook}
 */
proto.notekeeper.Notebook.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notekeeper.Notebook;
  return proto.notekeeper.Notebook.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notekeeper.Notebook} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notekeeper.Notebook}
 */
proto.notekeeper.Notebook.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new title_pb.Title;
      reader.readMessage(value,title_pb.Title.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContainer(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContainerid(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDefault(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocked(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNotecount(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreated(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notekeeper.Notebook.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notekeeper.Notebook.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notekeeper.Notebook} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.notekeeper.Notebook.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      title_pb.Title.serializeBinaryToWriter
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContainer();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOwnerid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getContainerid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDefault();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getLocked();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getNotecount();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getCreated();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getUpdated();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.notekeeper.Notebook.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.notekeeper.Notebook.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Title name = 2;
 * @return {?proto.notekeeper.Title}
 */
proto.notekeeper.Notebook.prototype.getName = function() {
  return /** @type{?proto.notekeeper.Title} */ (
    jspb.Message.getWrapperField(this, title_pb.Title, 2));
};


/** @param {?proto.notekeeper.Title|undefined} value */
proto.notekeeper.Notebook.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.notekeeper.Notebook.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.notekeeper.Notebook.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string scope = 3;
 * @return {string}
 */
proto.notekeeper.Notebook.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.notekeeper.Notebook.prototype.setScope = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string container = 4;
 * @return {string}
 */
proto.notekeeper.Notebook.prototype.getContainer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.notekeeper.Notebook.prototype.setContainer = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string ownerId = 5;
 * @return {string}
 */
proto.notekeeper.Notebook.prototype.getOwnerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.notekeeper.Notebook.prototype.setOwnerid = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string containerId = 6;
 * @return {string}
 */
proto.notekeeper.Notebook.prototype.getContainerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.notekeeper.Notebook.prototype.setContainerid = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool default = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.notekeeper.Notebook.prototype.getDefault = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.notekeeper.Notebook.prototype.setDefault = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bool locked = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.notekeeper.Notebook.prototype.getLocked = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.notekeeper.Notebook.prototype.setLocked = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int32 noteCount = 9;
 * @return {number}
 */
proto.notekeeper.Notebook.prototype.getNotecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.notekeeper.Notebook.prototype.setNotecount = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string created = 10;
 * @return {string}
 */
proto.notekeeper.Notebook.prototype.getCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.notekeeper.Notebook.prototype.setCreated = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string updated = 11;
 * @return {string}
 */
proto.notekeeper.Notebook.prototype.getUpdated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.notekeeper.Notebook.prototype.setUpdated = function(value) {
  jspb.Message.setField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notekeeper.CreateNotebookRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notekeeper.CreateNotebookRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.notekeeper.CreateNotebookRequest.displayName = 'proto.notekeeper.CreateNotebookRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notekeeper.CreateNotebookRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.notekeeper.CreateNotebookRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notekeeper.CreateNotebookRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.notekeeper.CreateNotebookRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && common_pb.RequestHeader.toObject(includeInstance, f),
    name: (f = msg.getName()) && title_pb.Title.toObject(includeInstance, f),
    scope: jspb.Message.getFieldWithDefault(msg, 3, ""),
    container: jspb.Message.getFieldWithDefault(msg, 4, ""),
    ownerid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    containerid: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notekeeper.CreateNotebookRequest}
 */
proto.notekeeper.CreateNotebookRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notekeeper.CreateNotebookRequest;
  return proto.notekeeper.CreateNotebookRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notekeeper.CreateNotebookRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notekeeper.CreateNotebookRequest}
 */
proto.notekeeper.CreateNotebookRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.RequestHeader;
      reader.readMessage(value,common_pb.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new title_pb.Title;
      reader.readMessage(value,title_pb.Title.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContainer(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContainerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notekeeper.CreateNotebookRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notekeeper.CreateNotebookRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notekeeper.CreateNotebookRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.notekeeper.CreateNotebookRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      title_pb.Title.serializeBinaryToWriter
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContainer();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOwnerid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getContainerid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional RequestHeader header = 1;
 * @return {?proto.notekeeper.RequestHeader}
 */
proto.notekeeper.CreateNotebookRequest.prototype.getHeader = function() {
  return /** @type{?proto.notekeeper.RequestHeader} */ (
    jspb.Message.getWrapperField(this, common_pb.RequestHeader, 1));
};


/** @param {?proto.notekeeper.RequestHeader|undefined} value */
proto.notekeeper.CreateNotebookRequest.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.notekeeper.CreateNotebookRequest.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.notekeeper.CreateNotebookRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Title name = 2;
 * @return {?proto.notekeeper.Title}
 */
proto.notekeeper.CreateNotebookRequest.prototype.getName = function() {
  return /** @type{?proto.notekeeper.Title} */ (
    jspb.Message.getWrapperField(this, title_pb.Title, 2));
};


/** @param {?proto.notekeeper.Title|undefined} value */
proto.notekeeper.CreateNotebookRequest.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.notekeeper.CreateNotebookRequest.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.notekeeper.CreateNotebookRequest.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string scope = 3;
 * @return {string}
 */
proto.notekeeper.CreateNotebookRequest.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.notekeeper.CreateNotebookRequest.prototype.setScope = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string container = 4;
 * @return {string}
 */
proto.notekeeper.CreateNotebookRequest.prototype.getContainer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.notekeeper.CreateNotebookRequest.prototype.setContainer = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string ownerId = 5;
 * @return {string}
 */
proto.notekeeper.CreateNotebookRequest.prototype.getOwnerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.notekeeper.CreateNotebookRequest.prototype.setOwnerid = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string containerId = 6;
 * @return {string}
 */
proto.notekeeper.CreateNotebookRequest.prototype.getContainerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.notekeeper.CreateNotebookRequest.prototype.setContainerid = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notekeeper.SaveNotebookRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notekeeper.SaveNotebookRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.notekeeper.SaveNotebookRequest.displayName = 'proto.notekeeper.SaveNotebookRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notekeeper.SaveNotebookRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.notekeeper.SaveNotebookRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notekeeper.SaveNotebookRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.notekeeper.SaveNotebookRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && common_pb.RequestHeader.toObject(includeInstance, f),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: (f = msg.getName()) && title_pb.Title.toObject(includeInstance, f),
    scope: jspb.Message.getFieldWithDefault(msg, 4, ""),
    container: jspb.Message.getFieldWithDefault(msg, 5, ""),
    ownerid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    containerid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    pb_default: jspb.Message.getFieldWithDefault(msg, 8, false),
    locked: jspb.Message.getFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notekeeper.SaveNotebookRequest}
 */
proto.notekeeper.SaveNotebookRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notekeeper.SaveNotebookRequest;
  return proto.notekeeper.SaveNotebookRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notekeeper.SaveNotebookRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notekeeper.SaveNotebookRequest}
 */
proto.notekeeper.SaveNotebookRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.RequestHeader;
      reader.readMessage(value,common_pb.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = new title_pb.Title;
      reader.readMessage(value,title_pb.Title.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContainer(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setContainerid(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDefault(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocked(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notekeeper.SaveNotebookRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notekeeper.SaveNotebookRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notekeeper.SaveNotebookRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.notekeeper.SaveNotebookRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      title_pb.Title.serializeBinaryToWriter
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getContainer();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOwnerid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getContainerid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDefault();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getLocked();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * optional RequestHeader header = 1;
 * @return {?proto.notekeeper.RequestHeader}
 */
proto.notekeeper.SaveNotebookRequest.prototype.getHeader = function() {
  return /** @type{?proto.notekeeper.RequestHeader} */ (
    jspb.Message.getWrapperField(this, common_pb.RequestHeader, 1));
};


/** @param {?proto.notekeeper.RequestHeader|undefined} value */
proto.notekeeper.SaveNotebookRequest.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.notekeeper.SaveNotebookRequest.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.notekeeper.SaveNotebookRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.notekeeper.SaveNotebookRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.notekeeper.SaveNotebookRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Title name = 3;
 * @return {?proto.notekeeper.Title}
 */
proto.notekeeper.SaveNotebookRequest.prototype.getName = function() {
  return /** @type{?proto.notekeeper.Title} */ (
    jspb.Message.getWrapperField(this, title_pb.Title, 3));
};


/** @param {?proto.notekeeper.Title|undefined} value */
proto.notekeeper.SaveNotebookRequest.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.notekeeper.SaveNotebookRequest.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.notekeeper.SaveNotebookRequest.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string scope = 4;
 * @return {string}
 */
proto.notekeeper.SaveNotebookRequest.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.notekeeper.SaveNotebookRequest.prototype.setScope = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string container = 5;
 * @return {string}
 */
proto.notekeeper.SaveNotebookRequest.prototype.getContainer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.notekeeper.SaveNotebookRequest.prototype.setContainer = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string ownerId = 6;
 * @return {string}
 */
proto.notekeeper.SaveNotebookRequest.prototype.getOwnerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.notekeeper.SaveNotebookRequest.prototype.setOwnerid = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string containerId = 7;
 * @return {string}
 */
proto.notekeeper.SaveNotebookRequest.prototype.getContainerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.notekeeper.SaveNotebookRequest.prototype.setContainerid = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bool default = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.notekeeper.SaveNotebookRequest.prototype.getDefault = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.notekeeper.SaveNotebookRequest.prototype.setDefault = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional bool locked = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.notekeeper.SaveNotebookRequest.prototype.getLocked = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.notekeeper.SaveNotebookRequest.prototype.setLocked = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notekeeper.GetNotebooksRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notekeeper.GetNotebooksRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.notekeeper.GetNotebooksRequest.displayName = 'proto.notekeeper.GetNotebooksRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notekeeper.GetNotebooksRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.notekeeper.GetNotebooksRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notekeeper.GetNotebooksRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.notekeeper.GetNotebooksRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && common_pb.RequestHeader.toObject(includeInstance, f),
    scope: jspb.Message.getFieldWithDefault(msg, 2, ""),
    container: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ownerid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    containerid: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notekeeper.GetNotebooksRequest}
 */
proto.notekeeper.GetNotebooksRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notekeeper.GetNotebooksRequest;
  return proto.notekeeper.GetNotebooksRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notekeeper.GetNotebooksRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notekeeper.GetNotebooksRequest}
 */
proto.notekeeper.GetNotebooksRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.RequestHeader;
      reader.readMessage(value,common_pb.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContainer(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContainerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notekeeper.GetNotebooksRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notekeeper.GetNotebooksRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notekeeper.GetNotebooksRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.notekeeper.GetNotebooksRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContainer();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOwnerid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getContainerid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional RequestHeader header = 1;
 * @return {?proto.notekeeper.RequestHeader}
 */
proto.notekeeper.GetNotebooksRequest.prototype.getHeader = function() {
  return /** @type{?proto.notekeeper.RequestHeader} */ (
    jspb.Message.getWrapperField(this, common_pb.RequestHeader, 1));
};


/** @param {?proto.notekeeper.RequestHeader|undefined} value */
proto.notekeeper.GetNotebooksRequest.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.notekeeper.GetNotebooksRequest.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.notekeeper.GetNotebooksRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string scope = 2;
 * @return {string}
 */
proto.notekeeper.GetNotebooksRequest.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.notekeeper.GetNotebooksRequest.prototype.setScope = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string container = 3;
 * @return {string}
 */
proto.notekeeper.GetNotebooksRequest.prototype.getContainer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.notekeeper.GetNotebooksRequest.prototype.setContainer = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string ownerId = 4;
 * @return {string}
 */
proto.notekeeper.GetNotebooksRequest.prototype.getOwnerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.notekeeper.GetNotebooksRequest.prototype.setOwnerid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string containerId = 5;
 * @return {string}
 */
proto.notekeeper.GetNotebooksRequest.prototype.getContainerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.notekeeper.GetNotebooksRequest.prototype.setContainerid = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notekeeper.GetNotebooksResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.notekeeper.GetNotebooksResponse.repeatedFields_, null);
};
goog.inherits(proto.notekeeper.GetNotebooksResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.notekeeper.GetNotebooksResponse.displayName = 'proto.notekeeper.GetNotebooksResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.notekeeper.GetNotebooksResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notekeeper.GetNotebooksResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.notekeeper.GetNotebooksResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notekeeper.GetNotebooksResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.notekeeper.GetNotebooksResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && common_pb.ResponseHeader.toObject(includeInstance, f),
    notebooksList: jspb.Message.toObjectList(msg.getNotebooksList(),
    proto.notekeeper.Notebook.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notekeeper.GetNotebooksResponse}
 */
proto.notekeeper.GetNotebooksResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notekeeper.GetNotebooksResponse;
  return proto.notekeeper.GetNotebooksResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notekeeper.GetNotebooksResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notekeeper.GetNotebooksResponse}
 */
proto.notekeeper.GetNotebooksResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.ResponseHeader;
      reader.readMessage(value,common_pb.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.notekeeper.Notebook;
      reader.readMessage(value,proto.notekeeper.Notebook.deserializeBinaryFromReader);
      msg.addNotebooks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notekeeper.GetNotebooksResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notekeeper.GetNotebooksResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notekeeper.GetNotebooksResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.notekeeper.GetNotebooksResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getNotebooksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.notekeeper.Notebook.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader header = 1;
 * @return {?proto.notekeeper.ResponseHeader}
 */
proto.notekeeper.GetNotebooksResponse.prototype.getHeader = function() {
  return /** @type{?proto.notekeeper.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, common_pb.ResponseHeader, 1));
};


/** @param {?proto.notekeeper.ResponseHeader|undefined} value */
proto.notekeeper.GetNotebooksResponse.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.notekeeper.GetNotebooksResponse.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.notekeeper.GetNotebooksResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Notebook notebooks = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.notekeeper.Notebook>}
 */
proto.notekeeper.GetNotebooksResponse.prototype.getNotebooksList = function() {
  return /** @type{!Array.<!proto.notekeeper.Notebook>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.notekeeper.Notebook, 2));
};


/** @param {!Array.<!proto.notekeeper.Notebook>} value */
proto.notekeeper.GetNotebooksResponse.prototype.setNotebooksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.notekeeper.Notebook=} opt_value
 * @param {number=} opt_index
 * @return {!proto.notekeeper.Notebook}
 */
proto.notekeeper.GetNotebooksResponse.prototype.addNotebooks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.notekeeper.Notebook, opt_index);
};


proto.notekeeper.GetNotebooksResponse.prototype.clearNotebooksList = function() {
  this.setNotebooksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.notekeeper.DeleteNotebookRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.notekeeper.DeleteNotebookRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.notekeeper.DeleteNotebookRequest.displayName = 'proto.notekeeper.DeleteNotebookRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.notekeeper.DeleteNotebookRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.notekeeper.DeleteNotebookRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.notekeeper.DeleteNotebookRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.notekeeper.DeleteNotebookRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && common_pb.RequestHeader.toObject(includeInstance, f),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    scope: jspb.Message.getFieldWithDefault(msg, 3, ""),
    container: jspb.Message.getFieldWithDefault(msg, 4, ""),
    ownerid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    containerid: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.notekeeper.DeleteNotebookRequest}
 */
proto.notekeeper.DeleteNotebookRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.notekeeper.DeleteNotebookRequest;
  return proto.notekeeper.DeleteNotebookRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.notekeeper.DeleteNotebookRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.notekeeper.DeleteNotebookRequest}
 */
proto.notekeeper.DeleteNotebookRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.RequestHeader;
      reader.readMessage(value,common_pb.RequestHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContainer(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContainerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.notekeeper.DeleteNotebookRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.notekeeper.DeleteNotebookRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.notekeeper.DeleteNotebookRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.notekeeper.DeleteNotebookRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.RequestHeader.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContainer();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOwnerid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getContainerid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional RequestHeader header = 1;
 * @return {?proto.notekeeper.RequestHeader}
 */
proto.notekeeper.DeleteNotebookRequest.prototype.getHeader = function() {
  return /** @type{?proto.notekeeper.RequestHeader} */ (
    jspb.Message.getWrapperField(this, common_pb.RequestHeader, 1));
};


/** @param {?proto.notekeeper.RequestHeader|undefined} value */
proto.notekeeper.DeleteNotebookRequest.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.notekeeper.DeleteNotebookRequest.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.notekeeper.DeleteNotebookRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.notekeeper.DeleteNotebookRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.notekeeper.DeleteNotebookRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string scope = 3;
 * @return {string}
 */
proto.notekeeper.DeleteNotebookRequest.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.notekeeper.DeleteNotebookRequest.prototype.setScope = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string container = 4;
 * @return {string}
 */
proto.notekeeper.DeleteNotebookRequest.prototype.getContainer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.notekeeper.DeleteNotebookRequest.prototype.setContainer = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string ownerId = 5;
 * @return {string}
 */
proto.notekeeper.DeleteNotebookRequest.prototype.getOwnerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.notekeeper.DeleteNotebookRequest.prototype.setOwnerid = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string containerId = 6;
 * @return {string}
 */
proto.notekeeper.DeleteNotebookRequest.prototype.getContainerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.notekeeper.DeleteNotebookRequest.prototype.setContainerid = function(value) {
  jspb.Message.setField(this, 6, value);
};


goog.object.extend(exports, proto.notekeeper);
